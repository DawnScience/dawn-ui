/*-
 * Copyright (c) 2019 Diamond Light Source Ltd.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */

package org.dawnsci.datavis.view;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.dawnsci.datavis.model.DataOptions;
import org.dawnsci.datavis.model.DataOptionsDataset;
import org.dawnsci.datavis.model.ExpressionApplier;
import org.dawnsci.datavis.model.IFileController;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.dawnsci.analysis.api.expressions.IExpressionService;
import org.eclipse.january.dataset.Dataset;
import org.eclipse.january.dataset.DatasetUtils;
import org.eclipse.january.dataset.IDataset;
import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.progress.IProgressService;

/**
 * An Eclipse dialog to apply a user defined expression to data in the Dawn
 * DataVis Perspective.
 * 
 * @author Timothy Spain, timothy.spain@diamond.ac.uk
 *
 */
public class ExpressionDialog extends Dialog {

	private DataOptions selected;
	
	private IExpressionService service;

	private ExpressionApplier applier;
	private String expression;
	
	private String expressionName = "expr";
	private DataOptions result = null;

	private Collection<String> varsNamesToLoad;
	
	private ExpressionDialogDatasetRegion datasetPart;
	
	private Label shapeLabel;
	private Label resultLabel;
	
	// Hardcoded layout
	private int varWidth = 50;
	private int datasetWidth = 400;
	
	
	protected ExpressionDialog(Shell parentShell) {
		super(parentShell);
	}

	/**
	 * Creates the dialog, ready for it to be opened.
	 * @param parentShell
	 * 					UI shell for the dialog to appear in.
	 * @param service
	 * 				The {@link IExpressionService} to be used in evaluating the expression entered by the user.
	 * @param input
	 * 				The {@link DataOptions} object on which the action was initiated.
	 * @param controller
	 * 				The controller for the other loaded files and their available datasets
	 */
	public ExpressionDialog(Shell parentShell, IExpressionService service, DataOptions input, IFileController controller) {
		this(parentShell);
		
		this.service = service;
		this.selected = input;
		
		datasetPart = new ExpressionDialogDatasetRegion(controller, input);
	}
	
	@Override
	protected Control createDialogArea(Composite parent) {
		Composite container = (Composite) super.createDialogArea(parent);
		
		container.setLayout(new GridLayout(2, true));
		
		datasetPart.setDatasetWidth(datasetWidth);
		datasetPart.setVarWidth(varWidth);
		datasetPart.setTableHeight(DIALOG_DEFAULT_BOUNDS);
		
		datasetPart.createComposite(container);
		createRightColumn(container);
		
		return container;
	}
	
	@Override
	protected void configureShell(Shell newShell) {
		super.configureShell(newShell);
	    newShell.setText("Apply Expressions");
	}
	
	/**
	 * Gets the result generated by the user in the Dialog
	 * @return the {@link Dataset} containing the result data.
	 */
	public DataOptions getResult() {
		return result;
	}
	
	
	private Composite createRightColumn(Composite parent) {
		Composite expressionComposite = new Composite(parent, SWT.NONE);

		Text expressionText = new Text(expressionComposite, SWT.MULTI | SWT.BORDER | SWT.WRAP | SWT.V_SCROLL);
		expressionText.setEditable(true);
		expressionText.addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(ModifyEvent e) {
				expression = ((Text) e.getSource()).getText();
				// clear any expression result
				clearResult();
				// parse the expression as it stands. If an exception is not thrown, then
				// gather the list of variable names.
				try {
					varsNamesToLoad = applier.parseForVariables(expression);
				} catch (Exception ex) {
					// Do nothing
				}
			
			}
		});
		
		Text expressionNameText = new Text(expressionComposite, SWT.BORDER);
		expressionNameText.setText(this.expressionName);
		expressionNameText.setEditable(true);
		expressionNameText.addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(ModifyEvent e) {
				expressionName = alphaNumerize(((Text) e.getSource()).getText());
			}
		});
		
		Label eqLabel = new Label(expressionComposite, SWT.CENTER);
		eqLabel.setText("=");
		
		resultLabel = new Label(expressionComposite, SWT.TRAIL);
		
		shapeLabel = new Label(expressionComposite, SWT.LEAD);
		
		// Set up the layout in another method
		createExpressionLayout(expressionComposite, expressionNameText, eqLabel, expressionText, resultLabel, shapeLabel);
		
		applier = new ExpressionApplier(service);
		
		return expressionComposite;
	}

	private void createExpressionLayout(Composite parent, Text expressionNameText, Label eqLabel, Text expressionText, Label resultLabel, Label shapeLabel) {
		FormLayout expressionLayout = new FormLayout();
		expressionLayout.marginHeight = 5;
		expressionLayout.marginWidth = 5;
		parent.setLayout(expressionLayout);
		
		final int topOffset = 5;
		final int leftOffset = 5;
		GC gc = new GC(expressionNameText);
		// Lower case þ has both a descender and an ascender
		final int lineHeight = gc.textExtent("þ").y;
		// An em is the size of an M (ish)
		final int emWidth = gc.textExtent("M").x;
		
		// Expression name dialog box
		FormData nameData = new FormData(4*emWidth, lineHeight);
		nameData.top = new FormAttachment(0, topOffset);
		nameData.left = new FormAttachment(0, leftOffset);
		expressionNameText.setLayoutData(nameData);
		
		FormData eqData = new FormData(emWidth, lineHeight);
		eqData.top = new FormAttachment(0, 2*topOffset);
		eqData.left = new FormAttachment(expressionNameText);
		eqLabel.setLayoutData(eqData);
		
		FormData expData= new FormData(datasetWidth, 13*lineHeight);
		expData.top = new FormAttachment(expressionNameText, topOffset);
		expData.left = new FormAttachment(0, leftOffset);
		expData.right = new FormAttachment(100, leftOffset);
		expressionText.setLayoutData(expData);
		
		FormData resultData = new FormData(10*emWidth, lineHeight);
		resultData.top = new FormAttachment(expressionText);
		resultData.left = new FormAttachment(0, leftOffset);
		resultLabel.setLayoutData(resultData);
		
		FormData shapeData = new FormData(10*emWidth, lineHeight);
		shapeData.top = new FormAttachment(expressionText);
		shapeData.left = new FormAttachment(resultLabel, leftOffset);
		shapeLabel.setLayoutData(shapeData);
		
	}

	@Override
	protected void okPressed() {
		// No result, not calculated since expression was last edited.
		// Also, try gathering data. If successful, evaluate the expression
		if (result == null && successfullyGatheredData()) {
				evaluateExpression();
		}
		
		// Failed evaluation
		if (result == null)
			cancelPressed();
		
		super.okPressed();
	}
	
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		Button evaluateButton = createButton(parent, IDialogConstants.CLIENT_ID + IDialogConstants.PROCEED_ID, "Evaluate", true);
		super.createButtonsForButtonBar(parent);
		
		evaluateButton.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (result == null && successfullyGatheredData()) {
					evaluateExpression();
				}
				if (result != null) {
					resultLabel.setText("Result has shape:");
					shapeLabel.setText(Arrays.toString(result.getLazyDataset().getShape()));
				}
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
			}
		});
	}
	
	private boolean successfullyGatheredData() {
		final class Gatherer implements IRunnableWithProgress {
			Map<String, IDataset> variableMap;

			public Gatherer(Map<String, IDataset> map) {
				variableMap = map;
			}
			
			@Override
			public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
				// Load the required Datasets
				for (String varName: varsNamesToLoad) {
					DataOptions dataToLoad = datasetPart.getDatasetForVariable(varName);
					try {
						IDataset data = DatasetUtils.sliceAndConvertLazyDataset(dataToLoad.getLazyDataset());
						variableMap.put(varName, data);
					} catch (Exception e) {
						// Check for out of memory
						Throwable f = e;
						while (f != null) {
							f = f.getCause();
							if (f instanceof OutOfMemoryError)
								throw new InterruptedException("Out of memory loading variable \"" + varName + "\".");
						}
						
						throw new InterruptedException("Variable \"" + varName + "\" could not be loaded.");
					}
				}
			}
		}
		

		// Get the Eclipse IProgressService
		IProgressService progressService = PlatformUI.getWorkbench().getProgressService();

		Map<String, IDataset> variableMap = new HashMap<>();
		Gatherer gatherer = new Gatherer(variableMap);
		
		try {
			progressService.busyCursorWhile(gatherer);
		} catch (InvocationTargetException iTE) {
			return false;
		} catch (InterruptedException iE) {
			// if interrupted, stop here and don't add the variables to the context
			MessageDialog.openError(getShell(), "Variable not found", iE.getMessage());
			return false;
		}
		applier.addVariables(variableMap);
		return true;
	}
	
	
	private void evaluateExpression() {
		
		IRunnableWithProgress evaluator = new IRunnableWithProgress() {
			@Override
			public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
				Dataset output = (Dataset) applier.evaluateData(expression);
				if (output == null) {
					clearResult();
					return;
				}
				result = new DataOptionsDataset(expressionName, selected.getParent(), output);
			}
		};
		
		// Get the Eclipse IProgressService
		IProgressService progressService = PlatformUI.getWorkbench().getProgressService();

		try {
			progressService.busyCursorWhile(evaluator);
		} catch (InvocationTargetException iTE) {
			clearResult();
		} catch (InterruptedException iE) {
			clearResult();
		}
	}
	
	private String alphaNumerize(String in) {
		return in.replaceAll("\\W+", "");
	}
	
	private void clearResult() {
		result = null;
		resultLabel.setText("");
		shapeLabel.setText("");
	}
}
