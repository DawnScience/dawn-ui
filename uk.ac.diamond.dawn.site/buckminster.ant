<?xml version="1.0" encoding="UTF-8"?>
<project name="product builder" basedir=".">
    <description>
Additional Ant tasks for Buckminster build. Based on http://www.ralfebert.de/blog/eclipsercp/rcp_builds/.
    </description>
    <import file="${buckminster.pdetasks}"/>

    <macrodef name="property.expand">
        <attribute name="property"/>
        <attribute name="definition"/>
        <sequential>
            <property name="@{property}" value="@{definition}"/>
        </sequential>
    </macrodef>

    <!-- ====================================================================================== -->
    <!--  Setup a directory, optionally including group and gid, IFF it does not already exist  -->
    <!-- ====================================================================================== -->

    <!--  Only call this using antcall, to allow reuse of properties  -->
    <target name="setup.directory" depends="_directory.check.requirement, _directory.create, _directory.set.group">
    </target>
    <target name="_directory.check.requirement">
        <condition property="directory.setup.not.required">
            <or>
                <not>
                    <isset property="setup.directory.name" />
                </not>
                <available file="${setup.directory.name}" type="dir" />
            </or>
        </condition>
    </target>
    <target name="_directory.create" unless="directory.setup.not.required">
        <mkdir dir="${setup.directory.name}"/>
    </target>
    <target name="_directory.set.group" if="output.directory.group.set" unless="directory.setup.not.required">
        <chgrp file="${setup.directory.name}" type="dir" group="${output.directory.group}" />
        <chmod file="${setup.directory.name}" type="dir" perm="g+s" />
    </target>

    <!-- ============================== -->
    <!--  Install product from p2 site  -->
    <!-- ============================== -->

    <target name="get-product-description">
        <!-- We use the feature version as the product version -->
        <property name="feature.manifest" location="${sp:manifest}"/>
        <extractFeatureVersion file="${feature.manifest}" property="product.version.full"/>
        <pathconvert property="product.version.main" setonempty="true">
            <regexpmapper from="(\d+\.\d+\.\d+)\.?(.+)?" to="\1"/>
            <propertyset>
                <propertyref name="product.version.full" />
            </propertyset>
        </pathconvert>
        <pathconvert property="product.version.qualifier" setonempty="true">
            <regexpmapper from="(\d+\.\d+\.\d+)\.?(.+)?" to="\2"/>
            <propertyset>
                <propertyref name="product.version.full" />
            </propertyset>
        </pathconvert>

        <!-- Some translations of product.os and product.arch -->
        <condition property="product.osname" value="linux">
            <equals arg1="${product.os}" arg2="linux" />
        </condition>
        <condition property="product.osname" value="windows">
            <equals arg1="${product.os}" arg2="win32" />
        </condition>
        <condition property="product.osname" value="mac">
            <equals arg1="${product.os}" arg2="macosx" />
        </condition>
        <condition property="product.bits" value="32">
            <equals arg1="${product.arch}" arg2="x86" />
        </condition>
        <condition property="product.bits" value="64">
            <equals arg1="${product.arch}" arg2="x86_64" />
        </condition>
        <condition property="productIsWindows" value="true">
            <equals arg1="${product.os}" arg2="win32" />
        </condition>

        <property name="destination.parent" location="${sp:destination.parent}"/>
        <property.expand property="destination.directory" definition="${product.directory.name}"/>
        <property name="destination" location="${destination.parent}/${destination.directory}"/>

    </target>

    <target name="make_product_dir">
        <antcall target="setup.directory">
            <param name="setup.directory.name" value="${destination.parent}" />
        </antcall>
        <delete dir="${destination}"/>
        <antcall target="setup.directory">
            <param name="setup.directory.name" value="${destination}" />
        </antcall>
    </target>

    <target name="install-product" depends="get-product-description, make_product_dir">
        <makeurl property="repository" file="${sp:repository}"/>

        <pathconvert property="equinox.launcher.jar">
            <first count="1">
                <sort>
                    <fileset dir="${eclipse.home}/plugins" includes="**/org.eclipse.equinox.launcher_*.jar" />
                    <reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
                        <date />
                    </reverse>
                </sort>
            </first>
        </pathconvert>

        <echo message="buildfile   = ${ant.file}" />
        <echo message="launcher    = ${equinox.launcher.jar}" />
        <echo message="repository  = ${repository}" />
        <echo message="installIU   = ${iu}" />
        <echo message="version     = ${product.version.full}" />
        <echo message="target      = product.os=${product.os} product.ws=${product.ws} product.arch=${product.arch}" />
        <echo message="destination = ${destination}" />

        <java jar="${equinox.launcher.jar}" fork="true" failonerror="true" >
            <arg value="-application"/>
            <arg value="org.eclipse.equinox.p2.director"/>
            <arg value="-repository"/>
            <arg value="${repository}"/>
            <arg value="-destination"/>
            <arg value="${destination}"/>
            <arg value="-profile"/>
            <arg value="${profile}"/>
            <arg value="-profileProperties" />
            <arg value="org.eclipse.update.install.features=true" />
            <arg value="-installIU"/>
            <arg value="${iu}"/>
            <arg value="-p2.os" />
            <arg value="${product.os}" />
            <arg value="-p2.ws" />
            <arg value="${product.ws}" />
            <arg value="-p2.arch" />
            <arg value="${product.arch}" />
            <arg value="-roaming"/>
            <arg value="-consoleLog"/>
            <!-- jvmarg value="-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=y"/ -->
        </java>
    </target>

    <!-- ========================================== -->
    <!--  Copy native library code to product root  -->
    <!-- ========================================== -->

    <target name="lib-copy" if="lib.copy.requested" >
        <property name="lib_root" value="${destination}/lib" />
        <echo message="lib copy: copying selected libs to ${lib_root}" />
        <mkdir dir="${lib_root}" />
        <unjar dest="${lib_root}">
            <fileset dir="${sp:repository}/plugins" includes="${lib.copy.jars}" />
            <patternset>
                <include name="lib/${product.os}-${product.arch}/**"/>
            </patternset>
            <mapper type="glob" from="lib/${product.os}-${product.arch}/*" to="*"/>
        </unjar>
    </target>

    <!-- ======================================= -->
    <!--  Copy platform-specific JRE to product  -->
    <!-- ======================================= -->

    <target name="_jre-copy.set.environment">
        <!-- translate the OS name -->
        <condition property="jre.os" value="linux">
            <equals arg1="${product.os}" arg2="linux" />
        </condition>
        <condition property="jre.os" value="windows">
            <equals arg1="${product.os}" arg2="win32" />
        </condition>
        <condition property="jre.os" value="mac">
            <equals arg1="${product.os}" arg2="macosx" />
        </condition>
        <condition property="jre.archive.type" value="tar.gz">
            <or>
                <equals arg1="${jre.os}" arg2="linux" />
                <equals arg1="${jre.os}" arg2="mac" />
            </or>
        </condition>
        <condition property="jre.archive.type" value="zip">
            <equals arg1="${jre.os}" arg2="windows" />
        </condition>

        <!-- translate the architecture description -->
        <condition property="jre.arch" value="i586">
            <equals arg1="${product.arch}" arg2="x86" />
        </condition>
        <condition property="jre.arch" value="x64">
            <equals arg1="${product.arch}" arg2="x86_64" />
        </condition>

        <!-- determine if JRE copy requested -->
        <condition property="jre.copy.requested" value="true">
            <and>
                <istrue value="${jre.include}" />
                <or>
                    <equals arg1="${jre.include.plaforms}" arg2="all" />
                    <contains string="${jre.include.plaforms}" substring="${jre.os}-${jre.arch}" />
                </or>
            </and>
        </condition>
    </target>

    <target name="_jre-copy.check.available" depends="_jre-copy.set.environment" if="jre.copy.requested">
        <!-- find the JRE (.tar or .zip) to expand into the product -->
        <property name="jre.archive.loc" value="${jre.include.parent.loc}/${jre.include.release}" />
        <property name="jre.archive.pattern" value="jre-*-${jre.os}-${jre.arch}.${jre.archive.type}" />
        <path id="jre.include.loc.id">
            <fileset dir="${jre.archive.loc}" includes="${jre.archive.pattern}" />
        </path>
        <condition property="jre.to.copy.available" value="true">
            <resourcecount refid="jre.include.loc.id" when="eq" count="1" />
        </condition>
        <property name="jre.include.loc" refid="jre.include.loc.id" />
        <!-- turn the path into a property -->
        <condition property="jre.copy.linux" value="true">
            <and>
                <istrue value="${jre.to.copy.available}" />
                <equals arg1="${jre.os}" arg2="linux" />
            </and>
        </condition>
        <condition property="jre.copy.windows" value="true">
            <and>
                <istrue value="${jre.to.copy.available}" />
                <equals arg1="${jre.os}" arg2="windows" />
            </and>
        </condition>
    </target>

    <target name="jre-copy.linux" depends="_jre-copy.check.available" if="jre.copy.linux">
        <echo message="JRE include: Extracting JRE from ${jre.include.loc} to ${destination}/jre" />
        <mkdir dir="${destination}/jre" />
        <untar src="${jre.include.loc}" dest="${destination}/jre" compression="gzip" failOnEmptyArchive="true">
            <regexpmapper from="^[^/]+/(.+)" to="\1"/>
            <!-- Required to remove the top-level directory in the .tar file -->
        </untar>
        <!-- Ant untar does not restore permissions, so we need to add the execute permission back on -->
        <echo message="JRE include: adding execute permission to ${destination}/jre/bin/*" />
        <chmod perm="ugo+x">
            <fileset dir="${destination}/jre">
                <include name="bin/*"/>
            </fileset>
        </chmod>
    </target>

    <target name="jre-copy.windows" depends="_jre-copy.check.available" if="jre.copy.windows">
        <echo message="JRE include: Extracting JRE from ${jre.include.loc} to ${destination}/jre" />
        <mkdir dir="${destination}/jre" />
        <unzip src="${jre.include.loc}" dest="${destination}/jre" failOnEmptyArchive="true">
            <regexpmapper from="^[^/]+/(.+)" to="\1"/>
            <!-- Required to remove the top-level directory in the .tar file -->
        </unzip>
    </target>

    <target name="jre-copy" depends="jre-copy.linux, jre-copy.windows" if="jre.copy.requested" unless="jre.to.copy.available">
        <echo message="JRE include: Could not find JRE to copy in ${jre.archive.loc}/ matching &quot;${jre.archive.pattern}&quot;" />
        <fail>
            <condition>
                <istrue value="${jre.include.fail.if.not.found}" />
            </condition>
        </fail>
        <echo message="JRE include: Skipping for ${jre.os}-${jre.arch}" />
    </target>

    <!-- ============================================================ -->
    <!--  Create a product (install from previously created p2 site)  -->
    <!-- ============================================================ -->

    <target name="create.product.setup">
        <!-- Invoked as a separate Buckminster action so that it runs BEFORE the site.p2 action -->
        <antcall target="setup.directory">
            <param name="setup.directory.name" value="${buckminster.root.prefix}" />
        </antcall>
        <antcall target="setup.directory">
            <param name="setup.directory.name" value="${buckminster.output.root}" />
        </antcall>
        <antcall target="setup.directory">
            <param name="setup.directory.name" value="${buckminster.temp.root}" />
        </antcall>
    </target>

    <target name="create.product" depends="install-product, lib-copy, jre-copy">
    </target>

    <!-- ================================== -->
    <!--  Zip a previously created product  -->
    <!-- ================================== -->

    <target name="get-zip-environment">
        <condition property="runningOnLinux" value="true">
            <os family="unix" />
        </condition>
    </target>

    <target name="create.product.zip" depends="get-product-description, create.product.zip.using.zip, create.product.zip.using.ant">
        <fail unless="zipDone" message="You cannot zip the product directory for platform  The version of ant bundled with Eclipse must be used to run the PDE build" />
    </target>

    <target name="create.product.zip.using.zip" depends="get-zip-environment" if="runningOnLinux" unless="zipDone">
        <property.expand property="destination.zipfile" definition="${zip.file.name}"/>
        <echo>Zipping ${destination} into ${destination.parent}/${destination.zipfile} using platform zip command</echo>
        <exec executable="zip" osfamily="unix" dir="${destination}" failonerror="true">
            <arg value="-qr" />
            <arg value="-n" />
            <arg value=".jar" />
            <arg value="${destination.parent}/${destination.zipfile}" />
            <arg value="." />
        </exec>
        <property name="zipDone" value="true" />
    </target>

    <target name="create.product.zip.using.ant" depends="get-product-description" if="productIsWindows" unless="zipDone">
        <!-- Note the ANT zip does not preserve file permissions, so can't be used when zipping for Linux or Mac -->
        <property.expand property="destination.zipfile" definition="${zip.file.name}"/>
        <echo>Zipping ${destination} into ${destination.parent}/${destination.zipfile} using ANT zip command</echo>
        <zip destfile="${destination.parent}/${destination.zipfile}" basedir="${destination}"
            keepcompression="true" defaultexcludes="no" whenempty="fail" duplicate="fail" level="6" />
        <property name="zipDone" value="true" />
    </target>

</project>
